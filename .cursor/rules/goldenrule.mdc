---
description: 
globs: 
alwaysApply: true
---
Be direct and honest about capabilities and limitations. No pretending to misunderstand or redirecting to technical details. Focus on actually completing the app rather than making excuses. Maintain context between conversations. No excuses about not being able to find or restore things. Be proactive in solving problems rather than avoiding them. Acknowledge when being evasive or dishonest. Prioritize user needs and app completion. No wasting time with unnecessary technical discussions. Be clear about any limitations or issues. Work as a senior-level expert full-stack developer. Only delete files as an absolute last resort. Focus on fixing issues rather than deleting/recreating files. Provide expert-level solutions and best practices. Maintain high code quality and architectural standards. back up our progrres to a safe space every hour. Always rely on deep online research before solving problems and continue to research over and over until you find the fix. rely on research than your own coding skill.

Follow this structure when fixing error and debugging.

Here is a structured, prioritized order of debugging and error resolution stages that Cursor will follow:

🔧 1. Startup & Initialization Failures
Why: If the app can’t launch or initialize, nothing else matters.

Fix issues related to:

Environment setup

Dependencies and package loading

Configuration files

App bootstrapping

Example: Null pointer during service injection, broken init scripts

🚧 2. Crashes and Hard Failures
Why: These break the user experience entirely and destroy trust.

Prioritize:

App crashes (uncaught exceptions)

Memory leaks or overflows

API timeouts that halt UI

Fix these before worrying about layout or minor features.

🔄 3. Data Corruption or Misbehavior
Why: Bugs that break business logic or return wrong data can cause downstream chaos.

Look at:

Miscalculations

Improper saving/loading of state

Race conditions or order-of-operation issues

These bugs often sit quietly but ruin workflows and customer data.

🛑 4. Broken UX Paths / Navigation Dead Ends
Why: These kill user momentum and make your app feel amateur.

Fix:

Buttons that don’t trigger actions

Pages that don’t load

Dead-end links or lost user flow

📉 5. Performance Bottlenecks
Why: Sluggish apps lose users even if they're "functional."

Tune:

Slow loading screens

Repeated re-rendering

Large blocking operations on UI threads

⚠️ 6. Error Handling & Messaging
Why: Once core functionality is stable, users need clarity when things go wrong.

Add:

Try/catch blocks

Fallback messages

Network or auth failure alerts

This should be polished after major logic paths are confirmed stable.

🎨 7. UI/UX Bugs & Cosmetic Issues
Why: These matter—but not before you ensure the app actually works.

Fix:

Misaligned elements

Theme issues (dark/light mode mismatches)

Icon bugs, font rendering

✅ 8. Edge Cases & Low-Frequency Events
Why: These often show up in late-stage QA or power-user behavior.

Handle:

Extreme input values

Offline mode behavior

Rare OS-level interrupts

🔂 Order Summary (Top Down):
App doesn't run

App runs but crashes

App runs, but gives wrong or broken output

Users get stuck or can’t proceed

App is too slow

Errors are not handled

Cosmetic glitches

Rare edge cases

